@page "/"
@using System.Net.Http.Json
@inject IHttpClientFactory factory
@inject IJSRuntime JS

<PageTitle>Energy Steal</PageTitle>

<h1 class="text-center my-4">Enter Energy Details</h1>

<EditForm Model="energyRequest" OnValidSubmit="HandleValidSubmit">
    <div class="row g-3 mb-3">
        <div class="col-md-3">
            <label for="authKey" class="form-label">Auth Key</label>
            <InputText id="authKey" @bind-Value="energyRequest.AuthKey" class="form-control" placeholder="Enter Auth Key" />
        </div>

        <div class="col-md-3">
            <label for="startTreeId" class="form-label">Start Tree ID</label>
            <InputText id="startTreeId" @bind-Value="energyRequest.StartTreeId" class="form-control" placeholder="Enter Start Tree ID" />
        </div>

        <div class="col-md-3">
            <label for="stopTreeId" class="form-label">Stop Tree ID</label>
            <InputText id="stopTreeId" @bind-Value="energyRequest.StopTreeId" class="form-control" placeholder="Enter Stop Tree ID" />
        </div>

        <div class="col-md-3">
            <label for="minDrop" class="form-label">Minimum Drop</label>
            <InputText id="minDrop" @bind-Value="energyRequest.MinDrop" class="form-control" placeholder="Enter Minimum Drop" />
        </div>
    </div>

    <div class="d-grid gap-2">
        <!-- Disable button while loading to prevent multiple clicks -->
        <button class="btn btn-success btn-lg" type="submit" disabled="@isLoading">Get Trees</button>
    </div>
</EditForm>

<!-- Display a loading spinner or message when data is being fetched -->
@if (isLoading)
{
    <div class="text-center mt-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading tree data, please wait...</p>
    </div>
}

<!-- Display error message if something went wrong -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-4" role="alert">
        @errorMessage
    </div>
}

<!-- Display a message if no data was found (204 response) -->
@if (noContent)
{
    <div class="alert alert-info mt-4 text-center" role="alert">
        No trees with energy found matching the criteria.
    </div>
}

<!-- Display tree data if available -->
@if (sortedTreeData is not null && sortedTreeData.Any())
{
    <h2 class="mt-5 text-center">Tree Data</h2>
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var tree in sortedTreeData)
        {
            <div class="col">
                <div class="card text-white bg-dark mb-3 shadow-lg">
                    <div class="card-header">
                        TreeId: @tree.TreeId
                        <button class="btn btn-outline-secondary btn-sm float-end" @onclick="() => CopyTreeIdToClipboard(tree.TreeId)">Copy</button>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Energy Amount: <strong>@tree.Amount</strong></h5>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private EnergyRequestModel energyRequest = new();
    IOrderedEnumerable<TreeResponseModel>? sortedTreeData;
    private bool isLoading = false;        // Indicates if the data is being fetched
    private string? errorMessage = null;   // Holds error message if the request fails
    private bool noContent = false;        // Indicates if no content was found

    private async Task HandleValidSubmit()
    {
        try
        {
            isLoading = true;              // Set loading state to true
            errorMessage = null;           // Reset error message
            noContent = false;             // Reset no content state

            var client = factory.CreateClient("api");

            // Send the request
            var response = await client.PostAsJsonAsync<EnergyRequestModel>("EnergySteal", energyRequest);

            if (response.IsSuccessStatusCode)
            {
                if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
                {
                    // If it's a 204 No Content, set the noContent flag
                    noContent = true;
                }

                else
                {
                    // Fetch the tree data
                    var treeData = await response.Content.ReadFromJsonAsync<List<TreeResponseModel>>();

                    // If there's no data, set the noContent flag
                    if (treeData is null || !treeData.Any())
                    {
                        noContent = true;
                    }
                    else
                    {
                        // Sort the tree data by descending energy amount
                        sortedTreeData = treeData.OrderByDescending(n => n.Amount);
                    }
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                errorMessage = "An unknown error occurred while processing the request.";

                // TODO: Fix issue with not getting custom error message from api, instead getting problem+json response

                // If it's a 400 Bad Request, capture and display the error message
                // var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponseModel>();
                // if (errorResponse != null)
                // {
                //     errorMessage = errorResponse.Error;  // Display the error message from the API
                // }
                // else
                // {
                //     errorMessage = "An unknown error occurred while processing the request.";
                // }
            }
            else
            {
                // Handle other failure status codes
                errorMessage = $"Unexpected error occurred. Status code: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;  // Reset loading state
            await InvokeAsync(StateHasChanged);  // Refresh the UI
        }
    }

    // Call the JS method to copy the treeId to clipboard
    private async Task CopyTreeIdToClipboard(int treeId)
    {
        await JS.InvokeVoidAsync("copyTextToClipboard", treeId.ToString());
    }
}
